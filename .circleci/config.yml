version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-supe-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-supe-${CIRCLE_WORKFLOW_ID:0:7}
  empty-bucket:
    description: Empties bucket before destroying enviroments
    steps:
      - run:
          name: Empty Bucket
          when: on_fail
          command: |
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request GET https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 ));
            then
              npm run migrations:revert
            fi

  install-aws-cli:
    description: Installs aws-cli for non aws-cli images
    steps:
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

jobs:
  frontend-dependencies:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - run:
          name: frontend dependencies
          working_directory: ./frontend
          command: npm install
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  backend-dependencies:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - run:
          name: backend dependencies
          working_directory: ./backend
          command: npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-frontend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          working_directory: ./backend
          command: |
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run frontend tests
          working_directory: ./frontend
          command: |
            npm run test

  test-backend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: run backend tests
          working_directory: ./backend
          command: |
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          working_directory: ./frontend
          command: |
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          working_directory: ./backend
          command: |
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend-supe-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "backend-supe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend-supe-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "frontend-supe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory and save it to memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=backend-supe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            echo $BACKEND_IP >> .circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/backend_ip

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["08:08:85:21:44:b8:cb:42:bc:49:7d:5b:c4:d3:4d:50"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - install-aws-cli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              curl -H "Content-Type: text/plain" -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request PUT --data "1" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            else
              curl -H "Content-Type: text/plain" -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request PUT --data "0" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment

  deploy-frontend:
    docker:
      - image: cimg/node:16.6.0
    steps:
      - checkout
      - install-aws-cli
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - empty-bucket
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["08:08:85:21:44:b8:cb:42:bc:49:7d:5b:c4:d3:4d:50"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request GET https://api.memstash.io/values/backend_ip)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl -s --head "$API_URL/api/status"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/index.html"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old Workflow ID to be able to clean it up later
          command: |
            curl -H "Content-Type: text/plain" -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request PUT --data "${CIRCLE_WORKFLOW_ID:0:7}" https://api.memstash.io/values/workflow_id
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name cloudfront-supe-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
        - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: 478e72d7-57cd-4f50-98bd-fc308dcd3ec7" --request GET https://api.memstash.io/values/WorkflowID)
            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "backend-supe-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "frontend-supe-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - frontend-dependencies
      - backend-dependencies
      - build-frontend:
          requires: [frontend-dependencies]
      - build-backend:
          requires: [backend-dependencies]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [main]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
           branches:
             only: [main]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [main]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [main]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [main]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [main]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [main]
